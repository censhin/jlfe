From 55d6eacdb07fea6f0020bd99b8034f7947513cf7 Tue Apr 15 10:26:36 2014
From: Duncan McGreggor <duncan@cogitat.io>
Date: Tue, 15 Apr 2014 10:26:36 -0700
Subject: [PATCH] A patch fo support jlfe syntax.

---
 src/lfe_macro.erl | 14 ++++++++++----
 1 file changed, 10 insertions(+), 4 deletions(-)

diff --git a/deps/lfe/src/lfe_macro.erl b/src/lfe_macro.erl
index 493f8fc..888fe0e 100644
--- a/deps/lfe/src/lfe_macro.erl
+++ b/deps/lfe/src/lfe_macro.erl
@@ -790,12 +790,18 @@ exp_predef(['MODULE'], _, St) ->
     {yes,?Q(St#mac.module),St};
 exp_predef(['LINE'], _, St) ->
     {yes,?Q(St#mac.line),St};
-exp_predef([Fun|As], _, St) when is_atom(Fun) ->
-    case string:tokens(atom_to_list(Fun), ":") of
-        [M,F] ->
+exp_predef([Fun|As]=Call, _, St) when is_atom(Fun) ->
+    FirstChar = lists:nth(1, atom_to_list(Fun)),
+    Tokens = string:tokens(atom_to_list(Fun), ":"),
+    case [FirstChar,Tokens] of
+        [46,_] ->
+            %io:format("Made it to a good outer match in jlfe_macro:exp_predef ...~n"),
+            {yes,[call,?Q(jlfe_java),?Q(dispatch),?Q(Call)],St};
+        [_,[M,F]] ->
             {yes,[call,?Q(list_to_atom(M)),?Q(list_to_atom(F))|As],St};
-        _ -> no                                 %This will also catch a:b:c
+        [_,_] -> no                                 %This will also catch a:b:c
     end;
+
 %% This was not a call to a predefined macro.
 exp_predef(_, _, _) -> no.
 
-- 
1.8.2

